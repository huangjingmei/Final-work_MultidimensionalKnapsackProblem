package bagtest;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class BagValue2 {
	
	
	static double result =0;
	static double result1 =0;
    static List<Double> sum = new ArrayList<>();
    static List<Double> sum1 = new ArrayList<>();
    static List<Double> TheSum = new ArrayList<>();
    static List<Double> distnum = new ArrayList<>();
    
    static List<List<Integer>> list=new ArrayList<>(); 
    static List<List<Integer>> list1=new ArrayList<>();
    
	public static void main(String[] args) {
		
	double[]bv={600.1,310.5,1800,3850,18.6,198.7,882,4200,402.5,327};

		int[]limit={450,540,200,360,440,480,200,360,440,480};

	int[][]a={{20,5,100,200,2,4,60,150,80,40},
				{20,7,130,280,2,8,110,210,100,40},
				{60,3,50,100,4,2,20,40,6,12},
				{60,8,70,200,4,6,40,70,16,20},
				{60,13,70,250,4,10,60,90,20,24},
				{60,13,70,280,4,10,70,105,22,28},
				{5,2,20,100,2,5,10,60,0,0},
				{45,14,80,180,6,10,40,100,20,0},
				{55,14,80,200,6,10,50,140,30,40},
				{65,14,80,220,6,10,50,180,30,50}};//存储背包的属性

		 double[] bs = new double[a[0].length];//保存二维数组中每行属性的值
		 double[] bb = new double[a[0].length];
		 double b=0.0;
		 int count = 0;
		        
		 for(int j=0;j<a.length;j++){
	    		for(int i=0;i<a[0].length;i++){
	    			bs[i]=a[j][i];
	    			
	    			if(j>0&&j<2) {
	    		
	    				bb[i]=a[j-1][i];//保存该实例属性集合的第一行的属性值
	    			}
	    			
	    			
	    		}
	    		
	    		
	    		if(j>0&&j<2) {
	    			result1=limit[j-1];
	    			list1 = count(bb, 0, -1, result1);//用一个集合 保存所有符合第一个总约束条件的背包下标
	    			
	    		}
	    		
	    		result=limit[j];
	    		list = count(bs, 0, -1, result);//用集合保存满足各个属性符合总约束条件的背包下标
	    		
	    		if(j>0&&j<a.length-1) {  //对所有符合总约束条件的背包集合进行求交集，求出所有属性共同符合约束条件的背包的集合
	    			list1.retainAll(list);
	    		
	    		}
	    	
	    		}
     System.out.println(list1);//输出符合所有约束条件的集合
     //根据各个子集计算相应的背包价值
	        for(List<Integer> z:list1){
	            for(Integer i:z){               	
	            	b=b+bv[i];
	            }
	            TheSum.add(b);
	          
	            b=0;  
	        }
	    System.out.println("该实例的最大值为："+Collections.max(TheSum));
	        System.out.println("\n");
		       

	
	}
	    public static List<List<Integer>> count(double[] es, double sum, int currIndex, double result){
	        List<List<Integer>> indexLink = new ArrayList<>();
	        int b=0;
	        for(int i=currIndex+1; i<es.length; i++){
	            double s = es[i]+sum;
	            if(s <=result){
	                List<List<Integer>> iLink = count(es, s, i, result);

	                for(List list:iLink){
	                    list.add(0,i);
	                    
	                }

	                if(iLink.size() > 0){
	                    indexLink.addAll(iLink);
	                    
	                }
	                
	                List<Integer> list = new ArrayList<>();
	                list.add(i);
	                indexLink.add(list);

	            }
	   
	        }

	        return indexLink;
	    }



}
